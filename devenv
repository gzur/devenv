#!/usr/bin/env python3

import os
import docker
import hashlib
import io
import click
import dockerpty

from subprocess import Popen, PIPE


DOCKERFILE = """
FROM centos:6

RUN yum upgrade -y && yum update -y

WORKDIR /yes
""".encode()
client = docker.from_env()


@click.group()
def cli():
    pass


def delete_containers():
    # only delete containers belonging to this environment
    filter_str = 'owner={env_name}'.format(env_name=get_image_name())
    deleted = client.containers.prune(dict(label=filter_str))
    container_ids = ",".join(deleted.get('ContainersDeleted') or [])
    if container_ids:
        click.echo("Deleted containers: {containers}".format(containers=container_ids))


def delete_images():
    # only delete the image belonging to this environment
    image_name = get_image_name()
    try:
        client.images.remove(image_name, force=True, noprune=True)
        click.echo("Deleted image {image_name}".format(image_name=image_name))
    except docker.errors.ImageNotFound:
        pass
        # click.echo("Image {image_name} does not exist.".format(image_name=image_name))


@cli.command()
def clean():
    delete_containers()
    delete_images()


def get_image_name():
    dirpath = os.getcwd()
    dirname = os.path.basename(dirpath)
    hasher = hashlib.sha1()
    hasher.update(dirpath.encode())
    return "{dirname}_{path_hash}".format(
        dirname=dirname,
        path_hash=hasher.hexdigest()[:8]
    )


@cli.command()
def image_name():
    click.echo(get_image_name())


@cli.command()
@click.option('--verbose', is_flag=True, type=click.BOOL,
              help='Enable verbose output')
@click.option('--force', is_flag=True, type=click.BOOL,
              help='Overwrite existing images')
def build(force=False, verbose=True):
    result = _build(force)
    if force:
        click.echo("Forcing new image {image_name}".format(image_name=get_image_name()))
    if verbose:
        click.echo(result.get('stdout'))
    else:
        click.echo("Built [{image_name}]".format(image_name=get_image_name()))


def get_image(image_name):
    try:
        return client.images.get(image_name)
    except docker.errors.ImageNotFound:
        return None


def get_container(container_id_or_name):
    try:
        return client.containers.get(container_id_or_name)
    except docker.errors.NotFound:
        return None

def get_container_name():
    return "container_{image_name}".format(image_name=get_image_name())

@cli.command()
def commit():
    container_name = get_container_name()
    container = get_container(container_name)
    if container is None:
        click.echo("No container found for environment.")
    else:
        container.commit(get_image_name())
        click.echo("Container commited.")


@cli.command()
def push():
    click.echo("PSYCH! - Not implemented ... yet")

@cli.command()
def shell():
    # volumes = dict()
    # volumes[os.getcwd()] = dict(bind='/yes', mode='rw')
    # run_conf = dict(
    #     detach=False,yum
    #     command='/bin/sh',
    #     tty=True,
    #     stdin_open=True,
    #     volumes=volumes
    # )
    # container = client.containers.create(get_image_name(), **run_conf)
    # dockerpty.start(client,container)
    image_name=get_image_name()

    volumes = "{host_dir}:{container_dir}".format(host_dir=os.getcwd(), container_dir='/yes')
    container_name = get_container_name()
    # Check if there exists a previous image
    if get_image(image_name) is None:
        _build()

    if get_container(container_name) is not None:
        click.echo("Container exists - resuming")
        os.system("docker start -a -i {container_name}".format(
            container_name=container_name
        ))
        # os.system("docker exec -i -t {container_name}  /bin/bash".format(
        #     container_name=container_name,
        #     volume_string = volumes
        # ))
    else:
        # click.echo("Creating new container")
        os.system("docker run -i -t -v {volumes} "
                  "--label=owner={image_name} "
                  "--name={container_name} "
                  "{image_name} "
                  "/bin/bash".format(
            image_name=image_name,
            container_name=container_name,
            volumes=volumes
        ))
    click.echo("Exited. (Run \"devenv commit\" to save state")


def _build(force=False):
    docker_file_like = io.BytesIO(DOCKERFILE)
    env_image_name = get_image_name()
    build_params = dict(
        fileobj= docker_file_like,
        tag=env_image_name,
        nocache=force is True
    )
    build_result = client.images.build(**build_params)
    output = list(build_result[1])
    output = "".join([x.get('stream', '') for x in output])
    return dict(image=build_result[0], stdout=output)

@cli.command()
def run():
    container_output = client.containers.run(get_image_name())
    click.echo(container_output)


if __name__ == '__main__':
    cli()